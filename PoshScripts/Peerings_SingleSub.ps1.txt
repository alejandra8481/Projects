#region README
<#
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
For scenarios like a Hub and Spoke Azure VNet model, there may be a need to add additional IP Address prefix ranges to the Hub VNet.
As of August 10, 2018, any VNet peerings on a VNet need to be removed first before an additional IP Address prefix ranges can be added to a VNet.  

THIS SCRIPT IS FOR SINGLE SUBSCRIPTION SCENARIOS WHERE BOTH HUB AND ALL SPOKE VNETS ARE IN THE SAME SUBSCRIPTION. 

This script automatically removes all VNet peerings from the "Hub" VNet, adds an address range prefix to the VNet based on an Input parameter, adds the VNet peerings back to the "Hub" VNet and "reconnects" them to the existing "Spoke" peerings. 
The user will need to manually copy Spoke VNet names, Spoke VNet Resource Group names, and Spoke VNet Peering names into the correct places in the code.

This script was created by the following individuals from Microsoft Enterprise Services:
    Randy Campbell     - randy.campbell@microsoft.com
	Henry Robalino	   - henry.robalino@microsoft.com 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#>
#endregion

####################################################################
##                                                                ##
##                        INPUT PARAMETERS                        ##
##                                                                ##
#################################################################### 

#region Input parameters
param(
    # Address Prefix range (CIDR Notation, e.g., 10.0.0.0/24)
    [parameter(Mandatory=$true)]
    [ValidatePattern('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$')]
	[String]$IPAddressRange1,

    # Address Prefix range (Subscription ID for Hub VNet)
    [parameter(Mandatory=$true)]
	[String]$HubVNetSubsID,

    # Address Prefix range (Hub VNet Resource Group Name)
    [parameter(Mandatory=$true)]
	[String]$HubVNetRGName,

    # Address Prefix range (Hub VNet Name)
    [parameter(Mandatory=$true)]
	[String]$HubVNetName
)
#endregion Input parameters

#region Set context to Hub VNet Subscription
Set-AzureRmContext -Subscription $HubVNetSubsID
#endregion

#region Get All Hub VNet Peerings and Hub VNet Object
$hubpeerings = Get-AzureRmVirtualNetworkPeering -ResourceGroupName $HubVNetRGName -VirtualNetworkName $HubVNetName
$hubvnet = Get-AzureRmVirtualNetwork -Name $HubVNetName -ResourceGroupName $HubVNetRGName
#endregion

#region Remove All Hub VNet Peerings
$hubpeerings | Remove-AzureRmVirtualNetworkPeering -Force
#endregion

#region ADD IP ADDRESS RANGE TO THE HUB VNET #
$hubvnet.AddressSpace.AddressPrefixes.Add($IPAddressRange1)
Set-AzureRmVirtualNetwork -VirtualNetwork $hubvnet
#endregion

#region Get all Spoke VNet Peerings and "Reset" them

#AFTER THE HUB VNET PEERINGS ARE DELETED, THE SPOKE VNET PEERINGS ARE NOW IN A "DISCONNECTED" STATE.
#THE FOLLOWING COMMANDS PUTS THE SPOKE VNET PEERINGS INTO A VARIABLE AND THEN "RESETS" THEM TO AN "INITIATED" STATE.  

$spoke1peering = Get-AzureRmVirtualNetworkPeering -ResourceGroupName "Spoke1RG" -VirtualNetworkName "SpokeV1Net" -Name "SpokeVNet1PeeringName"
Set-AzureRmVirtualNetworkPeering -VirtualNetworkPeering $spoke1peering

#REPEAT FOR ANY ADDITIONAL SPOKE VNETS LIKE THE FOLLOWING:

#$spoke2peering = Get-AzureRmVirtualNetworkPeering -ResourceGroupName "Spoke2RG" -VirtualNetworkName "SpokeV2Net" -Name "SpokeVNet2PeeringName"
#Set-AzureRmVirtualNetworkPeering -VirtualNetworkPeering $spoke2peering

#$spoke3peering = Get-AzureRmVirtualNetworkPeering -ResourceGroupName "Spoke3RG" -VirtualNetworkName "SpokeV3Net" -Name "SpokeVNet3PeeringName"
#Set-AzureRmVirtualNetworkPeering -VirtualNetworkPeering $spoke3peering

#endregion

#region Recreate All Hub VNet Peerings

#THE FOLLOWING COMMAND RECREATES ALL PREVIOUS HUB VNET PEERINGS THAT WERE DELETED WITH THE "ALLOW GATEWAY TRANSIT" OPTION ENABLED
#IF YOU ALSO NEED ANY ADDITIONAL FLAGS, SUCH AS "ALLOW FORWARDED TRAFFIC", SET THAT FLAG AT THE END OF THE COMMAND BELOW

$hubpeerings | ForEach-Object {Add-AzureRmVirtualNetworkPeering -Name $_.Name -VirtualNetwork $hubvnet -RemoteVirtualNetworkId $_.RemoteVirtualNetwork.Id -AllowGatewayTransit}  
#endregion  

